---
title: "WIP Historic Pop Data"
---

Things to do

decide which ages we want... do we need 0 to 104?
if needed then group Age 90+ in projected
bin ages
some ML to determine important variables (ages) perhaps random forest to auto select a subset of ages?

get annual demand data included

 Thoughts
 Visualise data
 Show the correlations with variables and with demand
 Is total enough or does male / female split work better

```{r librarys}

library(tidyverse)
library(readxl)

```

```{r load historic data}
historic_pop_raw <- 
    read_xlsx("../data/ukpopulationestimates18382020.xlsx", 
              sheet = "Table 3",
              skip = 4,
              col_names = TRUE)
```


```{r load projected data}
proj_pop_total_raw <- 
    read_xlsx("../data/nomis_2022_08_04_115225.xlsx", 
              sheet = "Total",
              skip = 6,
              col_names = TRUE)

proj_pop_male_raw <- 
    read_xlsx("../data/nomis_2022_08_04_115225.xlsx", 
              sheet = "Male",
              skip = 6,
              col_names = TRUE)

proj_pop_female_raw <- 
    read_xlsx("../data/nomis_2022_08_04_115225.xlsx", 
              sheet = "Female",
              skip = 6,
              col_names = TRUE)
```

```{r get annual demand data}

```

```{r functions}
# move to R script eventually


#' Transpose population table from Age in Rows and Year in Columns
#' to Year in rows and Age in columns
#'
#' @param tbl tibble: must have Age and table_name columns
#'
#' @return tibble: the transposed table
#' @export
#'
transpose_pop <- function(tbl) {
    # check we have table_name and Age columns and fail if not
    #
    #
    
    tbl %>%
        pivot_longer(-c(table_name, Age),
                     names_to = "Year",
                     values_to = "Pop") %>%
        # add "Age_" to Age column if needed
        # remove "Mid-" from year
        mutate(
            Age = if_else(str_detect(Age, "Age_"), Age, paste0("Age_", Age)),
            Year = str_remove(Year, "Mid-")
        ) %>%
        pivot_wider(Year,
                    names_from = c(table_name, Age),
                    values_from = Pop,
                    names_glue = "{table_name}_{Age}")
}

```

```{r historic}

historic_pop_clean <- 
    historic_pop_raw %>%
    # drop years columns that are not needed
    # keep 20 years (21 cols)
    select(1:21) %>%
    drop_na() %>%
    # remove annual total
    filter(!Age == "All Ages") %>%
    # add column to identify each table using repeated Age (1 for each table)
    group_by(Age) %>%
    mutate(table_number = row_number(Age)) %>%
    relocate(table_number) %>%
    mutate(
        table_name = case_when(
            table_number == 1 ~ "Total",
            table_number == 2 ~ "Male",
            table_number == 3 ~ "Female",
            TRUE ~ "Unknown"
        )
    ) %>%
    relocate(table_name) %>%
    select(-table_number) %>%
    ungroup() %>%
    transpose_pop()

```

```{r projected}
proj_pop_clean <- 
    bind_rows(
        proj_pop_total_raw %>%
            mutate(table_name = "Total"),
        proj_pop_male_raw %>%
            mutate(table_name = "Male"),
        proj_pop_female_raw %>%
            mutate(table_name = "Female")
    ) %>%
    # change Age to be same as historic, have underscore not space
    mutate(
        Age = str_replace(Age, " ", "_"),
        Age = str_remove(Age, "d")
    ) %>%
    transpose_pop()
```

```{r join data}
bind_rows(
    historic_pop_clean,
    proj_pop_clean
) %>%
    arrange(Year)

```


```{r}
# check assumptions about the data

# all years are present from start to end year (has_gaps from tsibble)
# no na data
# all ages are present

```

